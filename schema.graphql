schema {
  query: Query
  mutation: Mutation
}

type AccessTokenResponse {
  access_token: String!
}

type Cart {
  createdAt: DateTimeISO!
  hasLab: Boolean!
  id: ID!
  product: Product!
  quantity: Int!
  updatedAt: DateTimeISO
  user: User!
}

enum CategoryType {
  AGE
  PRODUCT
  TOPIC
}

input CheckoutOrderInput {
  vnp_Amount: String!
  vnp_BankCode: String!
  vnp_BankTranNo: String!
  vnp_CardType: String!
  vnp_OrderInfo: String!
  vnp_PayDate: String!
  vnp_ResponseCode: String!
  vnp_SecureHash: String!
  vnp_TmnCode: String!
  vnp_TransactionNo: String!
  vnp_TransactionStatus: String!
  vnp_TxnRef: String!
}

input CreateFeedbackInput {
  images: [File!]
  note: String
  orderItemId: Int!
  rating: Float!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Feedback {
  createdAt: DateTimeISO!
  id: ID!
  images: [FeedbackImage!]
  note: String
  orderItem: OrderItem!
  product: Product!
  rating: Float!
  updatedAt: DateTimeISO
  user: User!
}

type FeedbackImage {
  createdAt: DateTimeISO!
  id: ID!
  updatedAt: DateTimeISO
  url: String!
}

"""File upload scalar type"""
scalar File

type Mutation {
  addToCart(hasLab: Boolean!, productId: Float!, quantity: Float!): Cart!
  checkoutOrder(input: CheckoutOrderInput!): Boolean!
  createFeedback(input: [CreateFeedbackInput!]!, orderId: Float!): Boolean!
  createOrder(address: String!, cartIds: [Int!]!, fullName: String!, paymentProvider: PaymentProvider!, phone: String!): String!
  createProduct(images: [File!]!, input: ProductInput!, lab: File!): Product!
  createTicket(categoryId: Float!, comment: String!, images: [File!]! = [], orderItemId: Float!, title: String!): Ticket!
  deleteCarts(cartId: [Int!]!): String!
  deleteProduct(id: Float!): Product!
  getTokenResetPassword(OTPCode: String!, email: String!): String!
  login(email: String!, password: String!): AccessTokenResponse!
  loginWithGoogle(code: String!): AccessTokenResponse!
  register(email: String!, fullName: String!, password: String!, phone: String!): AccessTokenResponse!
  repayOrder(orderId: Float!): String!
  replyTicket(comment: String!, images: [File!]! = [], ticketId: Float!): Ticket!
  resetPassword(password: String!, token: String!): String!
  sendResetPasswordOTP(email: String!): String!
  updateAvatar(image: File!): User!
  updateCart(cartId: Float!, quantity: Float!): Cart!
  updateUser(address: String, email: String, fullName: String, phone: String): User!
}

type Order {
  address: String!
  createdAt: DateTimeISO!
  fullName: String!
  id: ID!
  isAllowRating: Boolean!
  orderItems: [OrderItem!]!
  payment: OrderPaymentEmbeddable!
  phone: String!
  shipTime: DateTimeISO
  status: OrderStatus!
  totalPrice: Int!
  updatedAt: DateTimeISO
}

type OrderItem {
  createdAt: DateTimeISO!
  hasLab: Boolean!
  id: ID!
  labPrice: Int!
  order: Order!
  product: Product!
  productPrice: Int!
  quantity: Int!
  updatedAt: DateTimeISO
}

type OrderPaymentEmbeddable {
  id: String
  provider: PaymentProvider!
  time: DateTimeISO
}

enum OrderStatus {
  DELIVERED
  DELIVERING
  PAID
  RATED
  UNPAID
}

enum PaymentProvider {
  VNPAY
}

type Product {
  categories: [ProductCategory!]!
  createdAt: DateTimeISO!
  description: String!
  feedbacks: [Feedback!]!
  id: ID!
  images: [ProductImage!]!
  lab: ProductLab
  name: String!
  price: Int!
  rating: Float!
  sold: Int!
  updatedAt: DateTimeISO
}

type ProductCategory {
  createdAt: DateTimeISO!
  id: ID!
  name: String!
  products: [Product!]!
  title: String!
  type: CategoryType!
  updatedAt: DateTimeISO
}

type ProductImage {
  createdAt: DateTimeISO!
  id: ID!
  updatedAt: DateTimeISO
  url: String!
}

input ProductInput {
  categoryIds: [Int!]!
  description: String!
  labPrice: Int!
  name: String!
  price: Int!
}

type ProductLab {
  createdAt: DateTimeISO!
  id: ID!
  price: Int!
  updatedAt: DateTimeISO
  url: String!
}

type ProductsWithPaginationResponse {
  items: [Product!]!
  pageInfo: e!
}

type Query {
  carts: [Cart!]!
  countCart: Float!
  me: User!
  product(id: Float!): Product!
  productCategories: [ProductCategory!]!
  products(categoryIds: [Int!] = [], currentItem: Int! = 9, currentPage: Int! = 1, maxPrice: Int = 10000000, maxRating: Int = 5, minPrice: Int = 0, minRating: Int = 0, order: SortOrder! = ASC, search: String! = "", sort: String! = "id"): ProductsWithPaginationResponse!
  searchOrder(search: String!, status: OrderStatus): [Order!]!
  tickets(currentItem: Int! = 9, currentPage: Int! = 1, order: SortOrder! = ASC, sort: String! = "id"): TicketsWithPaginationResponse!
  user(id: Int!): User
  users: [User!]!
}

enum Role {
  ADMIN
  CUSTOMER
  MANAGER
  STAFF
}

enum SortOrder {
  ASC
  DESC
}

type Ticket {
  category: TicketCategory!
  closedAt: DateTimeISO
  createdAt: DateTimeISO!
  id: ID!
  images: [TicketImage!]!
  orderItem: OrderItem!
  replier: User
  replierComment: String
  sender: User!
  senderComment: String!
  status: TicketStatus!
  title: String!
  updatedAt: DateTimeISO
}

type TicketCategory {
  createdAt: DateTimeISO!
  id: ID!
  name: String!
  tickets: [Ticket!]!
  updatedAt: DateTimeISO
}

type TicketImage {
  createdAt: DateTimeISO!
  id: ID!
  owner: Role!
  ticket: Ticket!
  updatedAt: DateTimeISO
  url: String!
}

enum TicketStatus {
  CLOSE
  OPEN
}

type TicketsWithPaginationResponse {
  items: [Ticket!]!
  pageInfo: e!
}

type User {
  address: String
  avatar: String
  createdAt: DateTimeISO!
  email: String!
  fullName: String!
  id: ID!
  phone: String
  role: Role!
  status: UserStatus!
  updatedAt: DateTimeISO
}

enum UserStatus {
  ACTIVE
  BAN
}

type e {
  currentItem: Int!
  currentPage: Int!
  totalItem: Int!
  totalPage: Int!
}